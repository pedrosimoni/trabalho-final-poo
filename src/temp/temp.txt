novo prato principal:
nova sobremesa:
novo garçom:
        System.out.print("\nDigite o nome do novo garçom: ");
        nome = sc.nextLine();
        System.out.print("\nDigite o CPF do novo garçom: ");
        cpf = sc.nextLong();
        System.out.print("\nDigite o RG do novo garçom: ");
        rg = sc.nextLong();
        sc.nextLine();
        System.out.print("\nDigite o Estado Civil do novo garçom: ");
        estadoCivil = sc.nextLine();
        System.out.print("\nDigite o Endereço do novo garçom: ");
        endereco = sc.nextLine();
        System.out.print("\nDeseja considerar hoje como a Aata de Adimissão do novo garçom? (s/n)");
        inputOp = sc.nextLine();
        if (inputOp.charAt(0) == 's' || inputOp.charAt(0) == 'S') {
        dataAdimissão = Restaurante.dataCentral.toLocalDate();
        } else {
        dataAdimissão = null;
        do {
        repetExcessoes = false;
        try {
        System.out.print("\nDigite a Data de Adimissão (ddmmaa): ");
        System.out.print("Ano: ");
        ano = sc.nextInt();
        System.out.print("Mes: ");
        mes = sc.nextInt();
        System.out.print("Dia: ");
        dia = sc.nextInt();
        sc.nextLine();
        dataAdimissão = LocalDate.of(ano, mes, dia);
        } catch (DateTimeException d) {
        System.out.println("Você digitou uma data inválida, por favor digite novamente");
        repetExcessoes = true;
        }
        }while(repetExcessoes);
        }
        System.out.print("\nDigite o Número da Carteira do novo garçom: ");
        numCarteira = sc.nextLong();
        sc.nextLine();
        System.out.print("\nDigite o dia de folga do novo garçom: ");
        diaFolga = sc.nextLine();
        System.out.print("Digite o Salário Base do novo garçom: ");
        salarioBase = sc.nextFloat();
        Garcom g = null;
        do{
        repetExcessoes = false;
        try {
        g = new Garcom(nome, cpf, rg, estadoCivil, endereco, dataAdimissão, numCarteira, diaFolga, salarioBase);
        } catch (CPFInvalido f) {
        System.out.println("Você digitou um cpf errado, por favor digite novamente: ");
        cpf = sc.nextLong();
        repetExcessoes = true;
        }
        }while(repetExcessoes);

        g.calculaSalario();
        Restaurante.garcons.add(g);
novo cozinheiro:
        System.out.print("\nDigite o nome do novo cozinheiro: ");
        nome = sc.nextLine();
        System.out.print("\nDigite o CPF do novo cozinheiro: ");
        cpf = sc.nextLong();
        System.out.print("\nDigite o RG do novo cozinheiro: ");
        rg = sc.nextLong();
        sc.nextLine();
        System.out.print("\nDigite o Estado Civil do novo cozinheiro: ");
        estadoCivil = sc.nextLine();
        System.out.print("\nDigite o Endereço do novo cozinheiro: ");
        endereco = sc.nextLine();
        System.out.print("\nDeseja considerar hoje como a Aata de Adimissão do novo cozinheiro? (s/n)");
        inputOp = sc.nextLine();
        if (inputOp.charAt(0) == 's' || inputOp.charAt(0) == 'S') {
        dataAdimissão = Restaurante.dataCentral.toLocalDate();
        } else {
        dataAdimissão = null;
        do {
        repetExcessoes = false;
        try {
        System.out.print("\nDigite a Data de Adimissão (ddmmaa): ");
        System.out.print("Ano: ");
        ano = sc.nextInt();
        System.out.println("6 -  Cadastrar novo ingrediente");
        System.out.println("7 -  Fazer Compras");
        System.out.println("8 -  Olhar estoque de ingredientes");
        System.out.println("9 -  Olhar cardápio");
        System.out.println("10 - Ver histórico de pedidos do mês");
        System.out.println("11 - Calcular e mostrar salários dos funcionários");
        System.out.println("12 - Sair");
        System.out.print("Mes: ");
        mes = sc.nextInt();
        System.out.print("Dia: ");
        dia = sc.nextInt();
        sc.nextLine();
        dataAdimissão = LocalDate.of(ano, mes, dia);
        } catch (DateTimeException d) {
        System.out.println("Você digitou uma data inválida, por favor digite novamente");
        repetExcessoes = true;
        }
        }while(repetExcessoes);

        }
        System.out.print("\nDigite o Número da Carteira do novo cozinheiro: ");
        numCarteira = sc.nextLong();
        System.out.print("\nO novo cozinheiro é especializado em Pratos Principais(1) ou Sobremesas(2)?\n ");
        pratoEspecializado = sc.nextInt() != 2;
        Cozinheiro c = null;
        do{
        repetExcessoes = false;
        try {
        c = new Cozinheiro(nome, cpf, rg, estadoCivil, endereco, dataAdimissão, numCarteira, pratoEspecializado);
        } catch (CPFInvalido f) {
        System.out.print("Você digitou um cpf errado, por favor digite novamente: ");
        cpf = sc.nextLong();
        repetExcessoes = true;
        }
        }while(repetExcessoes);

        c.calculaSalario();
        Restaurante.cozinheiros.add(c);
 nova Bebida:
 novo ingrediente:
        System.out.print("\nDigite o Nome do novo ingrediente: ");
        nome = sc.nextLine();
        System.out.print("\nDigite quantos ingredientes devem ser cadastrados: ");
        qtd = sc.nextInt();
        System.out.print("\nDigite o Preço de Custo do novo ingrediente: ");
        precoCusto = sc.nextDouble();
        Ingrediente i = new Ingrediente(nome, qtd, precoCusto);
        Restaurante.estoque.add(i);
 fazer compras:
 olhar estoque:
        for (Ingrediente in : Restaurante.estoque) {
        System.out.print("\n" + in.getNome());
        }
        System.out.println();
 olhar cardápio:

        Restaurante.menu();
        ver histório de pedidos no mes:
        for (Pedido pn : Restaurante.pedidosMensais){
        pn.mostrar();
        }
 calcular e mostrar salários dos funcionarios:

        Restaurante.mostrarCozinheiros();
        Restaurante.mostrarGarcons();



